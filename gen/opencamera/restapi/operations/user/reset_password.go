// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/opencameras/opencamd/gen/opencamera/models"
)

// ResetPasswordHandlerFunc turns a function with the right signature into a reset password handler
type ResetPasswordHandlerFunc func(ResetPasswordParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn ResetPasswordHandlerFunc) Handle(params ResetPasswordParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// ResetPasswordHandler interface for that can handle valid reset password params
type ResetPasswordHandler interface {
	Handle(ResetPasswordParams, *models.User) middleware.Responder
}

// NewResetPassword creates a new http.Handler for the reset password operation
func NewResetPassword(ctx *middleware.Context, handler ResetPasswordHandler) *ResetPassword {
	return &ResetPassword{Context: ctx, Handler: handler}
}

/* ResetPassword swagger:route PUT /user/reset user resetPassword

Reset user password

*/
type ResetPassword struct {
	Context *middleware.Context
	Handler ResetPasswordHandler
}

func (o *ResetPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewResetPasswordParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
