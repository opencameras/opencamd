// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/opencameras/opencamd/gen/opencamera/models"
)

// UpdateLiveConfigHandlerFunc turns a function with the right signature into a update live config handler
type UpdateLiveConfigHandlerFunc func(UpdateLiveConfigParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateLiveConfigHandlerFunc) Handle(params UpdateLiveConfigParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// UpdateLiveConfigHandler interface for that can handle valid update live config params
type UpdateLiveConfigHandler interface {
	Handle(UpdateLiveConfigParams, *models.User) middleware.Responder
}

// NewUpdateLiveConfig creates a new http.Handler for the update live config operation
func NewUpdateLiveConfig(ctx *middleware.Context, handler UpdateLiveConfigHandler) *UpdateLiveConfig {
	return &UpdateLiveConfig{Context: ctx, Handler: handler}
}

/* UpdateLiveConfig swagger:route PUT /media/live/config media updateLiveConfig

Update live session configuration

Update live session configuration, such as ice servers

*/
type UpdateLiveConfig struct {
	Context *middleware.Context
	Handler UpdateLiveConfigHandler
}

func (o *UpdateLiveConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateLiveConfigParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
