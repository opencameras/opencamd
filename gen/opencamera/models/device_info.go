// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceInfo device info
//
// swagger:model DeviceInfo
type DeviceInfo struct {

	// audio codec
	// Example: G.711
	// Enum: [G.711]
	AudioCodec string `json:"audio_codec,omitempty"`

	// frame per second
	// Example: 30
	Fps int64 `json:"fps,omitempty"`

	// camera resolution. Its format is "widthxheight"
	// Example: 1920Ã—1080
	Resolution string `json:"resolution,omitempty"`

	// device uptime in unix time
	Uptime int64 `json:"uptime,omitempty"`

	// uuid
	// Example: 123e4567-e89b-12d3-a456-426614174000
	UUID string `json:"uuid,omitempty"`

	// video codec
	// Example: H.265
	// Enum: [H.264 H.265]
	VideoCodec string `json:"video_codec,omitempty"`
}

// Validate validates this device info
func (m *DeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioCodec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoCodec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceInfoTypeAudioCodecPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["G.711"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceInfoTypeAudioCodecPropEnum = append(deviceInfoTypeAudioCodecPropEnum, v)
	}
}

const (

	// DeviceInfoAudioCodecGDot711 captures enum value "G.711"
	DeviceInfoAudioCodecGDot711 string = "G.711"
)

// prop value enum
func (m *DeviceInfo) validateAudioCodecEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceInfoTypeAudioCodecPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceInfo) validateAudioCodec(formats strfmt.Registry) error {
	if swag.IsZero(m.AudioCodec) { // not required
		return nil
	}

	// value enum
	if err := m.validateAudioCodecEnum("audio_codec", "body", m.AudioCodec); err != nil {
		return err
	}

	return nil
}

var deviceInfoTypeVideoCodecPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["H.264","H.265"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceInfoTypeVideoCodecPropEnum = append(deviceInfoTypeVideoCodecPropEnum, v)
	}
}

const (

	// DeviceInfoVideoCodecHDot264 captures enum value "H.264"
	DeviceInfoVideoCodecHDot264 string = "H.264"

	// DeviceInfoVideoCodecHDot265 captures enum value "H.265"
	DeviceInfoVideoCodecHDot265 string = "H.265"
)

// prop value enum
func (m *DeviceInfo) validateVideoCodecEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceInfoTypeVideoCodecPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceInfo) validateVideoCodec(formats strfmt.Registry) error {
	if swag.IsZero(m.VideoCodec) { // not required
		return nil
	}

	// value enum
	if err := m.validateVideoCodecEnum("video_codec", "body", m.VideoCodec); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device info based on context it is used
func (m *DeviceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInfo) UnmarshalBinary(b []byte) error {
	var res DeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
